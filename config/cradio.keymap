// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Home row mods macro
#define HRML(k1,k2,k3) &ht LALT k1  &ht LCTRL k2  &ht LGUI k3
#define HRMR(k1,k2,k3) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3

// Combo macro
#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
  };

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td_enter: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LSHFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ENTER>, <&caps_word>;
        };
    };

    combos {
                compatible = "zmk,combos";

                COMBO(ESC, &kp ESC, 0 1)
                COMBO(DEL, &kp DEL, 8 9)
                COMBO(TAB, &kp TAB, 1 2)
                
        };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp F      &kp P         &kp G            &kp J            &kp L      &kp U      &kp Y      &kp SQT
            &kp A      HRML(R,    S,         T)            &kp D            &kp H            HRMR(N,    E,         I)         &kp O
            &kp Z      &kp X      &kp C      &kp V         &kp B            &kp K            &kp M      &kp COMMA  &kp DOT    &kp FSLH
                                             &lt 2 DEL     &td_enter        &ht LSHFT SPACE  &lt 1 BSPC
            >;
        };

        right_layer {
            bindings = <
            &kp INS     &kp N7  &kp N8  &kp N9  &none          &none  &kp HOME    &kp PG_DN  &kp PG_UP   &kp END
            &none       &kp N4  &kp N5  &kp N6  &none          &none  &kp LEFT    &kp DOWN   &kp UP      &kp RIGHT
            &caps_word  &kp N1  &kp N2  &kp N3  &kp N0         &none  &kp C_PREV  &kp C_PP   &kp C_NEXT  &none
                                        &trans  &kp ESC        &none  &none
            >;
        };

        left_layer {
            bindings = <
            &none     &kp LBKT  &kp LBRC  &kp RBRC  &none         &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE
            &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT     &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE
            &none     &none     &none     &none     &none         &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &none
                                          &none     &none         &none      &trans
            >;
        };

        tri_layer {
            bindings = <
            &sys_reset   &kp PSCRN  &kp LA(F4)  &none       &bt BT_SEL 0             &none     &none     &none     &none    &sys_reset
            &bootloader  &none      &none       &none       &bt BT_SEL 1             &none     &none     &none     &none    &bootloader
            &none        &none      &none       &bt BT_CLR  &bt BT_SEL 2             &none     &none     &none     &none    &none
                                                &none       &none                    &none     &none
            >;
        };
    };
};
